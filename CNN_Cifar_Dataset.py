# -*- coding: utf-8 -*-
"""LAB_15_IITKanpur.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hr-y4_LBor1_OV9hblzGcbpOg_3-bcYT
"""

import tensorflow as tf
# from tensorflow import keras
from keras.datasets import cifar10
import numpy as np
import numpy.random as nr
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from sklearn.metrics import accuracy_score
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.optimizers import SGD
nc = 10

(Xtrain,ytrain), (Xtest, ytest) = cifar10.load_data()

imgplot1 = plt.imshow(Xtrain[nr.randint(50000)])
plt.show()

imgplot2 = plt.imshow(Xtrain[nr.randint(50000)])
plt.show()

Xtrain = Xtrain.astype('float32')
Xtrain = Xtrain[0:20000,:]/255.0
Xtest = Xtest.astype('float32')
Xtest = Xtest/255.0

ytrain = ytrain[:,0]
ytrainEnc = tf.one_hot(ytrain[0:20000], depth = nc)
ytest = ytest[:,0]
ytestEnc = tf.one_hot(ytest, depth = nc)

model = Sequential()
model.add(Conv2D(32,(3,3), activation = "relu", kernel_initializer = "he_uniform",padding = 'same', input_shape = (32,32,3)))
model.add(Conv2D(32,(3,3), activation = "relu", kernel_initializer = "he_uniform",padding = 'same'))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3), activation = "relu", kernel_initializer = "he_uniform", padding = 'same'))
model.add(Conv2D(64,(3,3), activation = "relu", kernel_initializer = "he_uniform", padding = 'same'))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(128,(3,3), activation = "relu", kernel_initializer = "he_uniform", padding = 'same'))
model.add(Conv2D(128,(3,3), activation = "relu", kernel_initializer = "he_uniform", padding = 'same'))
model.add(MaxPooling2D(2,2))
model.add(Flatten())
model.add(Dense(128, activation = "relu", kernel_initializer = "he_uniform"))
model.add(Dense(10,activation = 'softmax'))
opt = SGD(learning_rate = 0.001, momentum = 0.9)
model.compile(optimizer = opt, loss = 'categorical_crossentropy', metrics = ['accuracy'])

history = model.fit(Xtrain, ytrainEnc, epochs = 100, batch_size = 550, validation_data = (Xtest, ytestEnc))

ypred = model.predict(Xtest)
ypred = np.argmax(ypred, axis = 1)

score = accuracy_score(ypred, ytest)
print('Accuracy score is', 100*score, " %")